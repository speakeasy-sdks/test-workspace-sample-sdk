// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type TopupRequestBodyAmount struct {
	Currency *string `json:"currency,omitempty"`
	Value    *string `json:"value,omitempty"`
}

func (o *TopupRequestBodyAmount) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *TopupRequestBodyAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type TopupRequestBody struct {
	AccountToken       *string                 `json:"accountToken,omitempty"`
	Amount             *TopupRequestBodyAmount `json:"amount,omitempty"`
	MerchantID         *string                 `json:"merchantId,omitempty"`
	PartnerReferenceNo *string                 `json:"partnerReferenceNo,omitempty"`
	PublicUserID       *string                 `json:"publicUserId,omitempty"`
	Title              *string                 `json:"title,omitempty"`
}

func (o *TopupRequestBody) GetAccountToken() *string {
	if o == nil {
		return nil
	}
	return o.AccountToken
}

func (o *TopupRequestBody) GetAmount() *TopupRequestBodyAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TopupRequestBody) GetMerchantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantID
}

func (o *TopupRequestBody) GetPartnerReferenceNo() *string {
	if o == nil {
		return nil
	}
	return o.PartnerReferenceNo
}

func (o *TopupRequestBody) GetPublicUserID() *string {
	if o == nil {
		return nil
	}
	return o.PublicUserID
}

func (o *TopupRequestBody) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type TopupRequest struct {
	AuthorizationCustomer *string           `header:"style=simple,explode=false,name=Authorization-Customer"`
	ChannelID             *string           `header:"style=simple,explode=false,name=Channel-ID"`
	RequestBody           *TopupRequestBody `request:"mediaType=application/json"`
	XClientKey            *string           `header:"style=simple,explode=false,name=X-Client-Key"`
	XExternalID           *string           `header:"style=simple,explode=false,name=X-EXTERNAL-ID"`
	XSignature            *string           `header:"style=simple,explode=false,name=X-Signature"`
	XTimestamp            *string           `header:"style=simple,explode=false,name=X-Timestamp"`
}

func (o *TopupRequest) GetAuthorizationCustomer() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCustomer
}

func (o *TopupRequest) GetChannelID() *string {
	if o == nil {
		return nil
	}
	return o.ChannelID
}

func (o *TopupRequest) GetRequestBody() *TopupRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *TopupRequest) GetXClientKey() *string {
	if o == nil {
		return nil
	}
	return o.XClientKey
}

func (o *TopupRequest) GetXExternalID() *string {
	if o == nil {
		return nil
	}
	return o.XExternalID
}

func (o *TopupRequest) GetXSignature() *string {
	if o == nil {
		return nil
	}
	return o.XSignature
}

func (o *TopupRequest) GetXTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.XTimestamp
}

type TopupResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *TopupResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TopupResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TopupResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
