// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type AuthQueryWithdrawRequestBody struct {
	AccountToken               *string `json:"accountToken,omitempty"`
	MerchantID                 *string `json:"merchantId,omitempty"`
	OriginalPartnerReferenceNo *string `json:"originalPartnerReferenceNo,omitempty"`
	OriginalReferenceNo        *string `json:"originalReferenceNo,omitempty"`
	PublicUserID               *string `json:"publicUserId,omitempty"`
}

func (o *AuthQueryWithdrawRequestBody) GetAccountToken() *string {
	if o == nil {
		return nil
	}
	return o.AccountToken
}

func (o *AuthQueryWithdrawRequestBody) GetMerchantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantID
}

func (o *AuthQueryWithdrawRequestBody) GetOriginalPartnerReferenceNo() *string {
	if o == nil {
		return nil
	}
	return o.OriginalPartnerReferenceNo
}

func (o *AuthQueryWithdrawRequestBody) GetOriginalReferenceNo() *string {
	if o == nil {
		return nil
	}
	return o.OriginalReferenceNo
}

func (o *AuthQueryWithdrawRequestBody) GetPublicUserID() *string {
	if o == nil {
		return nil
	}
	return o.PublicUserID
}

type AuthQueryWithdrawRequest struct {
	AuthorizationCustomer *string                       `header:"style=simple,explode=false,name=Authorization-Customer"`
	ChannelID             *string                       `header:"style=simple,explode=false,name=Channel-ID"`
	RequestBody           *AuthQueryWithdrawRequestBody `request:"mediaType=application/json"`
	XClientKey            *string                       `header:"style=simple,explode=false,name=X-Client-Key"`
	XExternalID           *string                       `header:"style=simple,explode=false,name=X-EXTERNAL-ID"`
	XSignature            *string                       `header:"style=simple,explode=false,name=X-Signature"`
	XTimestamp            *string                       `header:"style=simple,explode=false,name=X-Timestamp"`
}

func (o *AuthQueryWithdrawRequest) GetAuthorizationCustomer() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCustomer
}

func (o *AuthQueryWithdrawRequest) GetChannelID() *string {
	if o == nil {
		return nil
	}
	return o.ChannelID
}

func (o *AuthQueryWithdrawRequest) GetRequestBody() *AuthQueryWithdrawRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *AuthQueryWithdrawRequest) GetXClientKey() *string {
	if o == nil {
		return nil
	}
	return o.XClientKey
}

func (o *AuthQueryWithdrawRequest) GetXExternalID() *string {
	if o == nil {
		return nil
	}
	return o.XExternalID
}

func (o *AuthQueryWithdrawRequest) GetXSignature() *string {
	if o == nil {
		return nil
	}
	return o.XSignature
}

func (o *AuthQueryWithdrawRequest) GetXTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.XTimestamp
}

type AuthQueryWithdrawResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *AuthQueryWithdrawResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AuthQueryWithdrawResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AuthQueryWithdrawResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
