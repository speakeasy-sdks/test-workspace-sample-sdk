// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type RedirectionDetails struct {
	FailureMethod       *string `json:"failureMethod,omitempty"`
	FailureURL          *string `json:"failureURL,omitempty"`
	RedirectionRequired *string `json:"redirectionRequired,omitempty"`
	SuccessMethod       *string `json:"successMethod,omitempty"`
	SuccessURL          *string `json:"successURL,omitempty"`
}

func (o *RedirectionDetails) GetFailureMethod() *string {
	if o == nil {
		return nil
	}
	return o.FailureMethod
}

func (o *RedirectionDetails) GetFailureURL() *string {
	if o == nil {
		return nil
	}
	return o.FailureURL
}

func (o *RedirectionDetails) GetRedirectionRequired() *string {
	if o == nil {
		return nil
	}
	return o.RedirectionRequired
}

func (o *RedirectionDetails) GetSuccessMethod() *string {
	if o == nil {
		return nil
	}
	return o.SuccessMethod
}

func (o *RedirectionDetails) GetSuccessURL() *string {
	if o == nil {
		return nil
	}
	return o.SuccessURL
}

type GenerateWebviewRequestBody struct {
	MerchantID         *string             `json:"merchantId,omitempty"`
	PartnerReferenceNo *string             `json:"partnerReferenceNo,omitempty"`
	RedirectionDetails *RedirectionDetails `json:"redirectionDetails,omitempty"`
	RegistrationToken  *string             `json:"registrationToken,omitempty"`
}

func (o *GenerateWebviewRequestBody) GetMerchantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantID
}

func (o *GenerateWebviewRequestBody) GetPartnerReferenceNo() *string {
	if o == nil {
		return nil
	}
	return o.PartnerReferenceNo
}

func (o *GenerateWebviewRequestBody) GetRedirectionDetails() *RedirectionDetails {
	if o == nil {
		return nil
	}
	return o.RedirectionDetails
}

func (o *GenerateWebviewRequestBody) GetRegistrationToken() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationToken
}

type GenerateWebviewRequest struct {
	ChannelID   *string                     `header:"style=simple,explode=false,name=CHANNEL-ID"`
	RequestBody *GenerateWebviewRequestBody `request:"mediaType=application/json"`
	XClientKey  *string                     `header:"style=simple,explode=false,name=X-CLIENT-KEY"`
	XExternalID *string                     `header:"style=simple,explode=false,name=X-EXTERNAL-ID"`
	XSignature  *string                     `header:"style=simple,explode=false,name=X-Signature"`
	XTimestamp  *string                     `header:"style=simple,explode=false,name=X-Timestamp"`
}

func (o *GenerateWebviewRequest) GetChannelID() *string {
	if o == nil {
		return nil
	}
	return o.ChannelID
}

func (o *GenerateWebviewRequest) GetRequestBody() *GenerateWebviewRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *GenerateWebviewRequest) GetXClientKey() *string {
	if o == nil {
		return nil
	}
	return o.XClientKey
}

func (o *GenerateWebviewRequest) GetXExternalID() *string {
	if o == nil {
		return nil
	}
	return o.XExternalID
}

func (o *GenerateWebviewRequest) GetXSignature() *string {
	if o == nil {
		return nil
	}
	return o.XSignature
}

func (o *GenerateWebviewRequest) GetXTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.XTimestamp
}

type GenerateWebviewResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GenerateWebviewResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GenerateWebviewResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GenerateWebviewResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
